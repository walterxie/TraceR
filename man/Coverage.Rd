% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CoverageReport.R
\name{Coverage}
\alias{Coverage}
\alias{selectResultByESS}
\alias{summariseParameters}
\alias{summariseTrueValues}
\alias{markInOut}
\title{Coverage Report from Model Validation}
\usage{
selectResultByESS(
  i.sta = 0,
  i.end = 99,
  prefix = "sim",
  file.steam.fun = function(prefix, i) {     paste0(prefix, "_", i) },
  file.postfix = "tsv",
  tree.file.postfix = "trees.tsv",
  extra.file.steam.fun = function(f) {     sub("\\\\.tsv$", "", f) },
  extra.files = c(),
  extr.tree.files = c()
)

summariseParameters(
  selected = list(),
  params = c("mu", "Theta", "psi.treeLength", "psi.height"),
  stats.name = c("mean", "HPD95.lower", "HPD95.upper", "stdev", "ESS"),
  output.file.fun = function(x) {     paste0(x, ".tsv") }
)

summariseTrueValues(
  selected.fn.steam = c(),
  log.file.fun = function(x) {     paste0(x, "_true.log") },
  tree.file.fun = function(x) {     paste0(x, "_true_ψ.trees") },
  params = c("μ", "Θ")
)

markInOut(
  df.posterior,
  df.tru.val,
  tru.val.par = "μ",
  sim.coln = "simulation",
  HPD95.lower = "HPD95.lower",
  HPD95.upper = "HPD95.upper"
)
}
\arguments{
\item{i.sta, i.end}{The start index or end index of batch runs,
also used in the file names.}

\item{prefix}{The prefix of statistics summary files.}

\item{file.steam.fun, extra.file.steam.fun}{The function to extract the file steam,
which is used as a key to identify the simulation.}

\item{file.postfix, tree.file.postfix}{The extension of statistics summary files.
This function uses \code{\link{readTracesTSV}},
The file extension can be different, but the file
has to be tab-delimited text file.}

\item{extra.files, extr.tree.files}{The extra files used to replace the low ESS results.}

\item{selected}{The list of data frames containing traces summary,
produced by \code{\link{selectResultByESS}}.}

\item{params}{The vector of parameter names in LPhy.}

\item{stats.name}{The vector of names of statistics. They have to be one of
names from the 1st column 'trace' in *.tsv file.}

\item{output.file.fun}{The function to create the summary file names
from the given parameters in the BEAST log.
Set to NA, if you do not want to create the files.}

\item{selected.fn.steam}{The vector of file name steams selected
by \code{selectResultByESS} to summarise
the coverage.}

\item{log.file.fun}{The function to get one-line log file name,
containing true values from LPhy simulations,
where one LPhy log file per simulation.}

\item{tree.file.fun}{The function to get one-tree log file name,
containing true trees from LPhy simulations,
where one LPhy tree file per simulation.
The tree stats are fixed to "total.br.len" (total branch length)
and "tree.height" at the moment.
Set to NA, if tree stats (e.g total branch length,
root height) is not required.}

\item{df.posterior}{The data frame containing the final stats summary of
the posterior of the selected parameter.}

\item{df.tru.val}{The data frame containing all of the true values
from all LPhy simulations. Created by \code{summariseTrueValues}}

\item{tru.val.par}{The parameter name in LPhy script, which may be different
to one in the BEAST log.}

\item{sim.coln}{The default column name as the key both in
\code{df.posterior} and \code{df.tru.val}.}
}
\description{
The pipeline to generate a coverage report of the model validation.

1. Summarise traces statistics for every simulations (normally starting 110,
   where 10 extra simulations are used for replacing any low ESS results
   in the next step), and save each result into a tsv file. It looks like:
   trace           posterior  likelihood  ...
   mean            -16848.58  -16269.03   ...
   stderr.of.mean	0.249      0.200       ...
   ...
   Note: if tree stats are logged into BEAST log file,
   you can set \code{tree.file=NA} to skip creating tree stats tsv file.
   See \code{\link{summariseTracesAndTrees}}.

2. Select 100 simulations where the ESS of every parameters are guaranteed
   >= 200. If not, then replace it to the one from the extra 10 sequentially,
   and check ESS. If all extra 10 are used but there exists any low-ESS simulations,
   then the pipeline stops and inform to re-run all simulations with longer
   MCMC chain length. See \code{\link{selectResultByESS}}.

3. Create a final summary file for visualisations.
   See \code{\link{summariseParameters}} and \code{\link{summariseTrueValues}}.

4. Plot coverage.
}
\details{
\code{selectResultByESS} selects 100 simulation results, where the ESS of
every parameters are guaranteed >= 200.
The inputs files are produced by \code{\link{summariseTracesAndTrees}}.
Set \code{tree.file.postfix=NA} and \code{extr.tree.files=c()},
if it does not require tree stats tsv files.

\code{summariseParameters} creates a file for each given parameters
storing the final stats summary of the posterior.
It also returns a list of data frame containing a parameter stats summary in each,
where rows are simulations and columns are statistics.

\code{summariseTrueValues} return a data frame to contain all of
the true values from all LPhy simulations.
LPhy does not log tree stats as a parameter,
but they can be computed from the true tree.

The returned data frame for "true values" uses the same format of BEAST 2
model validation pipeline \url{https://github.com/rbouckaert/DeveloperManual}.

\code{reportCoverage} produces a data frame as the report for
the selected simulations to measure how many true values are falling into
or outside the 95% HPD interval in the sampled posterior.

Note: the same parameter may be given different names between LPhy script
and BEAST XML/log, please ensure that you match them correctly.
}
\examples{
WD = file.path("~/WorkSpace/MyValidations/")
setwd(WD)
all.stats = list.files(pattern = "_([0-9]+).tsv")
all.stats # a char vector
extra.stats = all.stats[grep("_10([0-9]).tsv", all.stats, ignore.case = T)]
extra.stats # extra 10 simulations: *_100.tsv ~ *_109.tsv

# skip tree stats
sele.res <- selectResultByESS(i.sta=0, i.end=99, prefix="sim",
                              tree.file.postfix=NA,
                              extra.files = extra.stats)
low.ess <- sele.res$lowESS
sele.list <- sele.res$selected
names(sele.list)

summ <- summariseParameters(sele.list,
           params = c("mu","Theta", "psi.treeLength", "psi.height"))
min(summ$minESS)

# list.files(pattern = "_true.log")
df.tru <- summariseTrueValues(names(sele.list), params=c("μ","Θ"))
getwd()
write_tsv(df.tru, "trueValue.tsv")

# df.pos <- read_tsv("mu.tsv")
# df.tru <- read_tsv("trueValue.tsv")
inOut <- markInOut(df.pos, df.tru, tru.val.par="μ")
inOut
write_tsv(inOut, "mu-coverage.tsv")

}
\keyword{Coverage}
