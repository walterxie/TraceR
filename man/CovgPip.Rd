% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CoveragePipeline.R
\name{CovgPip}
\alias{CovgPip}
\alias{pipCreateSimulationSummaries}
\alias{pipSelectValidResults}
\alias{pipCreateParameterSummaries}
\alias{pipCreateTrueValueSummaries}
\alias{reportCoverages}
\title{Coverage Pipeline from Model Validation}
\usage{
pipCreateSimulationSummaries(
  log.files,
  burn.in = 0.1,
  process.tree.file = FALSE
)

pipSelectValidResults(
  i.sta = 0,
  i.end = 99,
  prefix = "sim",
  extra.file.fun = function(ext) {     list.files(pattern = paste0("_10([0-9])", ".",
    ext)) },
  extra.tree.file.fun = function(ext) {     list.files(pattern = paste0("_10([0-9])",
    ".", ext)) }
)

pipCreateParameterSummaries(
  selected = list(),
  params = c("mu", "Theta", "psi.treeLength", "psi.height"),
  stats.name = c("mean", "HPD95.lower", "HPD95.upper", "stdev", "ESS")
)

pipCreateTrueValueSummaries(
  selected.fn.steam = c(),
  params = c("μ", "Θ", "r_0", "r_1", "r_2"),
  add.tree.stats = TRUE,
  log.file.fun = function(x) {     paste0(x, "_true.log") },
  tree.file.fun = function(x) {     paste0(x, "_true_ψ.trees") }
)

reportCoverages(
  beast.params = c("mu", "Theta", "psi.treeLength", "psi.height"),
  lphy.params = c("μ", "Θ", "total.br.len", "tree.height"),
  beast.summ.file.fun = function(x) {     paste0(x, ".tsv") },
  true.val.file = "trueValue.tsv",
  write.file = TRUE
)
}
\arguments{
\item{log.files}{The vector of BEAST log file names.}

\item{burn.in}{The proportion of samples treated as the burn-in stage
during MCMC. Default to 0.1.}

\item{process.tree.file}{Default to FALSE, to skip creating tree stats tsv file
from BEAST tree logs.}

\item{i.sta, i.end}{The start index or end index of batch runs,
also used in the file names.}

\item{prefix}{The prefix of statistics summary files.}

\item{extra.file.fun, extra.tree.file.fun}{The function to list
the statistics summary file names of (10) extra runs.
Set extra.tree.file.fun = NA, if you do not need to
handle BEAST tree log files.}

\item{selected}{The list of data frames containing traces summary,
produced by \code{\link{pipSelectValidResults}}.}

\item{params}{The vector of parameter names in LPhy.}

\item{stats.name}{The vector of names of statistics. They have to be one of
names from the 1st column 'trace' in *.tsv file.}

\item{selected.fn.steam}{The vector of file name steams selected by
\code{pipSelectValidResults} to summarise
the coverage.}

\item{add.tree.stats}{Default to TRUE, to summarise true tree stats
which are fixed to "total.br.len" (total branch length)
and "tree.height" at the moment.
Set to False, if tree stats is not required
in the data frame.}

\item{log.file.fun}{The function to get one-line log file name,
containing true values from LPhy simulations,
where one LPhy log file per simulation.}

\item{tree.file.fun}{The function to get one-tree log file name,
containing true trees from LPhy simulations,
where one LPhy tree file per simulation.}

\item{beast.params, lphy.params}{The vector of BEAST or LPhy parameters,
and they have to exactly match each other.}

\item{beast.summ.file.fun}{The function to create beast posterior summary file name.}

\item{true.val.file}{The file containing true values for every parameters.}

\item{write.file}{Default to true to \code{\link{write_tsv}} for the coverage
of a parameter. The file name is created by
\code{paste0(beast.params[i], "-coverage.tsv")}.}
}
\description{
The pipeline to generate a coverage report of the model validation.
The input files for this pipeline are:
BEAST logs (tree logs) containing samples from the posterior,
and LPhy logs (tree logs) containing true values.
They suppose to be in the same working directory.

The steps of this pipeline are listed in the details:
}
\details{
Step 1: \code{pipCreateSimulationSummaries} summarises traces statistics for
every simulations (normally starting 110, where 10 extra simulations
are used for replacing any low ESS results in the next step),
and save each result into a tsv file.

It looks like:
trace           posterior  likelihood  ...
mean            -16848.58  -16269.03   ...
stderr.of.mean	0.249      0.200       ...
...

Note: if tree stats are logged into BEAST log file,
you can set \code{tree.file=NA} to skip creating tree stats tsv file
from BEAST tree logs.

It includes \code{\link{summariseTracesAndTrees}}.

Step 2: \code{pipSelectValidResults} selects 100 simulations
(run 110 in total), where the ESS of every parameters are guaranteed >= 200.
If not, then replace it to the one from the extra 10 sequentially,
and check ESS.

If all extra 10 are used but there exists any low-ESS simulations,
then the pipeline stops and inform to re-run all simulations with longer
MCMC chain length.

It includes \code{\link{selectResultByESS}}.

Step 3: \code{pipCreateParameterSummaries} summarise BEAST results for
each of parameters.It includes \code{\link{summariseParameters}}.

Step 4: \code{pipCreateTrueValueSummaries} creates one final summary file
containing true values for every parameters.
It includes \code{\link{summariseTrueValues}}.

Step 5: \code{reportCoverages} marks how many true values are falling
into or outside the 95% HPD interval of posteriors for each parameter,
and return the overall coverages in a data frame.
It includes \code{\link{markInOut}}.

Note: the same parameter may be given different names between LPhy script
and BEAST XML/log, please ensure that you match them correctly.
}
\examples{
WD = file.path("~/WorkSpace/MyValidations/")
setwd(WD)
# 110 simulations
log.files = list.files(pattern = "_([0-9]+).log")
# default to skip trees, because their stats are logged in the log files
beast.params <- pipCreateSimulationSummaries(log.files, burn.in=0.1)

all.stats = list.files(pattern = "_([0-9]+).tsv")
sele.list <- pipSelectValidResults(i.sta=0, i.end=99, prefix="al2",
                                   extra.tree.file.fun=NA)

beast.params = c("mu","Theta", "r_0", "r_1", "r_2", "psi.treeLength", "psi.height")
summ <- pipCreateParameterSummaries(sele.list, params = beast.params)
summ$param.summaries[["mu"]]

# list.files(pattern = "_true.log")
df.tru <- pipCreateTrueValueSummaries(names(sele.list), params=c("μ","Θ"), add.tree.stats=TRUE)

covg <- reportCoverages(beast.params = c("mu","Theta", "psi.treeLength", "psi.height"),
                        lphy.params = c("μ","Θ", "total.br.len","tree.height"))

}
\keyword{Coverage}
